import tkinter as tk
import threading
import time
import pyautogui
import pytesseract
import cv2
import numpy as np
from PIL import Image
import glob

# -------------------------------
# GLOBAL STATE
# -------------------------------
running = False
resources_collected = 0
ocr_reads = 0
start_time = None
screenshots = []  # list of screenshot file paths
current_index = 0  # index for cycling through screenshots

# -------------------------------
# BOT LOOP (OCR + click simulation)
# -------------------------------
def bot_loop(status_label, resource_label, ocr_label, timer_label):
    global running, resources_collected, ocr_reads, start_time, screenshots, current_index

    if not screenshots:
        print("No screenshots loaded!")
        return

    while running:
        time.sleep(1)  # wait between cycles

        # Load the current screenshot
        img = Image.open(screenshots[current_index])
        img_np = np.array(img)

        # OCR
        gray = cv2.cvtColor(img_np, cv2.COLOR_RGB2GRAY)
        text = pytesseract.image_to_string(gray, config='--psm 6')

        if text.strip():
            ocr_reads += 1

        # Simulate click at center of image (for counting only)
        resources_collected += 1

        # Update GUI
        resource_label.config(text=f"Resources: {resources_collected}")
        ocr_label.config(text=f"OCR Reads: {ocr_reads}")
        if start_time:
            elapsed = int(time.time() - start_time)
            timer_label.config(text=f"Time: {elapsed}s")

        # Move to next screenshot
        current_index = (current_index + 1) % len(screenshots)

# -------------------------------
# GUI OVERLAY
# -------------------------------
def launch_gui():
    global running, start_time, screenshots

    # Load screenshots
    screenshots = glob.glob("screenshots/*.png")  # adjust folder if needed
    print(f"Loaded {len(screenshots)} screenshots for OCR testing.")
    if not screenshots:
        print("No screenshots found! Place your images in the 'screenshots/' folder.")

    root = tk.Tk()
    root.title("Resource Bot Overlay")
    root.geometry("220x160+50+50")  # small fixed overlay

    # Labels
    status_label = tk.Label(root, text="Status: Stopped", font=("Arial", 12))
    status_label.pack()
    resource_label = tk.Label(root, text="Resources: 0", font=("Arial", 12))
    resource_label.pack()
    ocr_label = tk.Label(root, text="OCR Reads: 0", font=("Arial", 12))
    ocr_label.pack()
    timer_label = tk.Label(root, text="Time: 0s", font=("Arial", 12))
    timer_label.pack()

    # Buttons
    def start_bot():
        global running, start_time
        if not screenshots:
            print("No screenshots loaded! Cannot start bot.")
            return
        if not running:
            running = True
            start_time = time.time()
            status_label.config(text="Status: Running ✅")
            threading.Thread(
                target=bot_loop,
                args=(status_label, resource_label, ocr_label, timer_label),
                daemon=True
            ).start()

    def stop_bot():
        global running
        running = False
        status_label.config(text="Status: Stopped ⏹")

    start_btn = tk.Button(root, text="Start", command=start_bot)
    start_btn.pack(pady=3)
    stop_btn = tk.Button(root, text="Stop", command=stop_bot)
    stop_btn.pack(pady=3)

    root.mainloop()

# -------------------------------
# MAIN
# -------------------------------
if __name__ == "__main__":
    print(">>> BOT STARTED ✅ GUI launching...")
    launch_gui()
